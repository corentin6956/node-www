{
  "name": "contracts",
  "version": "0.4.0",
  "description": "Validation library to define and validate JSON Schemas for functions and express handlers. Supports filters.",
  "keywords": [
    "json schema",
    "schema",
    "data",
    "validation",
    "express"
  ],
  "author": {
    "name": "Eirikur Nilsson",
    "email": "eirikur@nilsson.is"
  },
  "url": "http://github.com/eirikurn/contracts/",
  "dependencies": {
    "JSV": "3.5.0",
    "validator": "0.2.9"
  },
  "devDependencies": {
    "expresso": "0.9.x",
    "should": "0.6.x"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "# Contracts\n\nDefine contracts for functions and express handlers to validate and filter parameters. This library bundles the [Json Schema Validator](https://github.com/garycourt/JSV) package with customizable format validation and filter support. It includes some nice filters and formats from the [node-validator](https://github.com/chriso/node-validator) library.\n\n## Defining Schemas\n\n    var contracts = require('contracts')\n      , f = contracts.filters;\n\n    var addSchema = {\n      type: 'array',\n      items: {\n        type: 'number',\n        filter: f.toFloat()\n      }\n    };\n\n    var userSchema = {\n      type: 'object',\n      additionalProperties: false,\n      filters: f.cleanObject(),\n      properties: {\n        email: { type: 'string', required: true, format: 'email' },\n        password: { type: 'string', required: true, minLength: 6 },\n        age: { type: 'integer', required: true, filter: f.toInt() }\n      }\n    };\n\n## Validating to a schema\n\n    var report = contracts.validate([5, '13', 8], addSchema);\n    report.errors;   // []\n    report.instance; // [5, 13, 8]\n\n## Transforming data using a schema\n\n    var new_obj = contracts.transform({email: 'foo@bar.com', password: 'foobar', age: '15', DANGEROUS: '...'}, userSchema);\n    new_obj; // {email: 'foo@bar.com', password: 'foobar', age: 15}\n\n## Wrapping functions for validation and data-fixing\n\n    var add = contracts.wrap(function() {\n      var args = [].slice.call(arguments)\n        , sum = args.reduce(function(a,b) { return a + b; }, 0);\n      return sum;\n    }, addSchema);\n    \n    add('5', '19.5', 3); // 27.5\n    add(1, {});          // throw ValidationError()\n\n## Validating post data in express with a view middleware\n\n    var app = express.createServer();\n    app.use express.bodyParser();\n\n    app.post('/users', contracts.view(userSchema), function(req, res) {\n        req.body; // {email: 'foo@bar.com', password: 'foobar', age: '15', DANGEROUS: '...'}\n        req.data; // {email: 'foo@bar.com', password: 'foobar', age: 15}\n    });\n\n## Built-in filters\n\n* cleanObject\n* cleanArray\n* removeEmpty\n\nFrom node-validator:\n\n* xss\n* entityDecode\n* entityEncode\n* ltrim\n* rtrim\n* trim\n* ifNull\n* toFloat\n* toInt\n* toBoolean\n* toBooleanStrict\n\n## Built-in format validators\n\nFrom node-validator:\n\n* email\n* url\n* ip\n* int\n* decimal\n* float\n* uuid\n\n## Custom filters\n\n    var schema = {\n      type: 'string',\n      filter: function(str) {\n        return str.replace(/-/g, '');\n      }\n    }\n\n    contracts.filters.add('stripSlashes', function(str) { return str.replace(/-/g, ''); });\n    schema = {\n      type: 'string',\n      filter: contracts.filters.stripSlashes().trim()\n    }\n\n## Custom formats\n\n    contracts.formats.add('ssn', function(str) {\n      // TODO: Validate that str is a ssn.\n      return true;\n    });\n\n    var schema = {\n      type: 'string',\n      format: 'ssn'\n    }\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Eirikur Nilsson &lt;eirikur@nilsson.is&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "Readme.md",
  "_id": "contracts@0.4.0",
  "dist": {
    "shasum": "ee2c518ef68707e575c60665ec5b05cba5459838"
  },
  "_from": "contracts@*",
  "_resolved": "https://registry.npmjs.org/contracts/-/contracts-0.4.0.tgz"
}
